// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  createdAt     DateTime  @default(now())

  accounts    Account[]
  sessions    Session[]
  collections Collection[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assets    Asset[]
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assets    Asset[]
}

model Author {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assets    Asset[]
}

model EngineVersion {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assets    Asset[]
}

model Asset {
  id               Int               @id @default(autoincrement())
  epicId           String            @unique
  name             String
  images           String[]
  shortDescription String
  description      String
  technicalDetails String
  price            Float
  discount         Float
  discountPercent  Int               @default(0)
  ratingScore      Float
  ratingCount      Int
  releasedAt       DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  plainData        Json              @default("{}")
  author           Author            @relation(fields: [authorId], references: [id])
  authorId         Int
  category         Category          @relation(fields: [categoryId], references: [id])
  categoryId       Int
  tags             Tag[]
  engineVersions   EngineVersion[]
  collectionAssets CollectionAsset[]

  @@index([epicId])
  @@index([price])
  @@index([discount])
  @@index([ratingScore])
  @@index([ratingCount])
  @@index([releasedAt])
}

model Collection {
  id          Int      @id @default(autoincrement())
  slug        String?  @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String
  systemName  String?
  isPublic    Boolean  @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  collectionAssets CollectionAsset[]

  @@unique([userId, name])
}

model CollectionAsset {
  id           Int        @id @default(autoincrement())
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  assetId      Int
  asset        Asset      @relation(fields: [assetId], references: [id])
  createdAt    DateTime   @default(now())

  @@unique([collectionId, assetId])
}
